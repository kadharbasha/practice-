def services = [
    "dir1",
    "dir2",
    "dir3",
    "dir4",
    "dir5",
    "dir4v2",
    "dir5v2",
    "dir6",
    "dir7"
]

def updated_services =[]

pipeline {
    agent any
    stages {
        stage('Fetching Updated Service') {
            steps{
                script{
                    for(int i=0; i < services.size(); i++) {
                        matches1 = sh (
                            script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${services[i]} build'", returnStatus: true
                        ) == 0
                        echo "Matches1: $matches1 for Service: ${services[i]}"
                        if("$matches1"!="false"){
                        //if("${services[i]}"=="dir3" || "${services[i]}"=="dir5" || "${services[i]}"=="dir7" ){
                            def service = "${services[i]}"
                            updated_services.add(service)
                            echo "${updated_services}"
                        }
                    }
                    //parallel branches
                }
            }
        }
        stage('parallel stage') {
            steps {
                script {
                    def parallelStagesMap = updated_services.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                    parallel parallelStagesMap
                }
            }
            post{
                always{
                    cleanWs()
                }
            }
        }
    }
}
def generateStage(serv) {
    return {
        stage("${serv}"){
            if("${serv}"!="dir4v2" && "${serv}"!="dir5v2"){
                script {
                    dir ("services/${serv}"){
                        sh "pwd"
                        sh "ls -la"
                    }
                }
            }
        }
    }
}