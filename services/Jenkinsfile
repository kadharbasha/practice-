def services = [
    "dir1",
    "dir2",
    "dir3",
    "dir4",
    "dir5",
    "dir4v2",
    "dir5v2",
    "dir6",
    "dir7"
]

def updated_services =[]

pipeline {
    agent any
    stages {
        stage('Fetching Updated Service') {
            steps{
                script{
                    for(int i=0; i < services.size(); i++) {
                        if("${services[i]}"!="dir4v2" && "${services[i]}"!="dir5v2"){
                            matches1 = sh (
                                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${services[i]} build'", returnStatus: true
                            ) == 0
                            echo "Matches1: $matches1 for Service: ${services[i]}"
                            if("$matches1"!="false"){
                                def service = "${services[i]}"
                                updated_services.add(service)
                            }
                        }
                        else if("${services[i]}"=="dir4v2" && "${services[i]}"=="dir5v2"){
                            def redir = "${services[i]}".toString().replaceAll("v2","")
                            echo "service of v2: ${redir}"
                            matches2 = sh (
                                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${redir} v2'", returnStatus: true
                            ) == 0
                            echo "Matches2: $matches2 for Service: ${services[i]}"
                            if("$matches2"!="false"){
                                def service = "${services[i]}"
                                updated_services.add(service)
                            }
                        }
                    }
                    echo "${updated_services}"
                }
            }
        }
        stage('parallel stage') {
            steps {
                script {
                    def parallelStagesMap = updated_services.collectEntries {
                        ["${it}" : generateStage(it)]
                    }
                    parallel parallelStagesMap
                }
            }
            post{
                always{
                    cleanWs()
                }
            }
        }
    }
}
def generateStage(serv) {
    return {
        stage("${serv}"){
            if("${serv}"!="dir4v2" && "${serv}"!="dir5v2"){
                script {
                    dir ("services/${serv}"){
                        sh "pwd"
                        sh "ls -la"
                    }
                }
            }
            else if("${serv}"=="dir4v2" && "${serv}"=="dir5v2"){
                def redir = "${serv}".toString().replaceAll("v2","")
                echo "service of v2: ${redir}"
                script {
                    dir ("services/${redir}/v2/build"){
                        sh "pwd"
                        sh "ls -la"
                    }
                }
            }
        }
    }
}