def job = [
    "dir1",
    "dir2",
    "dir3",
    "dir4",
    "dir5",
    "dir4v2",
    "dir5v2",
    "dir6",
    "dir7"
]


pipeline {
    agent any
    stages {
        stage('Fetching Updated Service') {
            steps{
                script{
                    def branches = [:]
                    for(int i=0; i < job.size(); i++) {
                        matches1 = sh (
                            script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${job[i]} build'", returnStatus: true
                        ) == 0
                        echo "Matches1: $matches1 for Service: ${job[i]}"
                        if("$matches1"!="false"){
                            def jobs = "${job[i]}"
                            branches["Build "+job[i]] = {buildProject(jobs)}
                        }
                    }
                    parallel branches
                }
            }
        }
    }
}


def buildProject(serv) {
    //echo "inbuildproject ${serv}"
    return {
        if("${serv}"!="dir4v2" && "${serv}"!="dir5v2"){
            /*matches1 = sh (
                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${serv} build'", returnStatus: true
            ) == 0
            echo "Matches1: $matches1 for Service: ${serv}"
            if("$matches1"!="false"){*/
                stage(serv + ' build'){
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                        script {
                            dir ("services/${serv}/cmd") {                                     
                                sh "ls -la"                                         
                            }
                            dir ("services/${serv}") {
                                sh "docker ps"
                            }
                        }    
                    }
                }
            //}
        }
        // condition for version 2 services
        else if("${serv}"=="dir4v2" || "${serv}"=="dir5v2"){
            redir1 = "${serv}".toString().replaceAll("v2","")
            /*matches2 = sh (
                script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${redir1} v2'", returnStatus: true
            ) == 0
            echo "Matches2: $matches2 for Service: ${serv} "
            if("$matches2"!="false"){*/
                stage(serv + ' build'){
                    catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                        script{
                            dir ("services/${redir1}/v2/cmd") {                                    
                                sh "ls -la"                                              
                            }
                            dir ("services/${redir1}/v2"){
                                sh "docker ps"
                            }    
                        }
                    }
                }
            //}
        }
    }
}