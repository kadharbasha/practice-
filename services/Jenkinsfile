def serv = [
        "dir1",
        "dir2",
        "dir3",
        "dir4",
        "dir5",
        "dir4v2",
        "dir5v2",
        "dir6",
        "dir7"
    ]
pipeline {
    agent none
    stages {
        stage('collect stages') {
            parallel {
                for(int i=0; i < list.size(); i++) {
                if("${serv[i]}"!="dir4v2" && "${serv[i]}"!="dir5v2"){
                    matches1 = sh (
                        script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2'} | uniq | grep -x '${serv[i]}'", returnStatus: true
                    ) == 0
                    echo "Matches1: $matches1 for Service: ${serv[i]}"
                    if("$matches1"!="false"){
                        stage(serv + ' build'){
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                                script {
                                    dir ("services/${serv[i]}/cmd") {                                     
                                        sh "ls -la"                                         
                                    }
                                    dir ("services/${serv[i]}") {
                                        sh "docker ps"
                                    }
                                }    
                            }
                        }
                    }
                }
                // condition for version 2 services
                else if("${serv[i]}"=="dir4v2" || "${serv[i]}"=="dir5v2"){
                    redir1 = "${serv[i]}".toString().replaceAll("v2","")
                    matches2 = sh (
                        script: "git diff --name-only HEAD~1 | sort -u | awk -F/ {'print \$2,\$3'} | uniq | grep -x '${redir1} v2'", returnStatus: true
                    ) == 0
                    echo "Matches2: $matches2 for Service: ${serv[i]} "
                    if("$matches2"!="false"){
                        stage(serv + ' build'){
                            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE'){
                                script{
                                    dir ("services/${redir1}/v2/cmd") {                                    
                                        sh "ls -la"                                              
                                    }
                                    dir ("services/${redir1}/v2"){
                                        sh "docker ps"
                                    }    
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
